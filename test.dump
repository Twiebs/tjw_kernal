
test.o:     file format elf32-i386
test.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .multiboot2_header 00000018  00000000  00000000  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .gdt          0000001e  00000000  00000000  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  2 .text         0000018f  00000000  00000000  00000210  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  3 .bss          00005000  00000000  00000000  000003a0  2**12
                  ALLOC
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 x86_64_boot.asm
00000000 l    d  .multiboot2_header	00000000 .multiboot2_header
00000000 l    d  .gdt	00000000 .gdt
00000000 l    d  .text	00000000 .text
00000000 l    d  .bss	00000000 .bss
00000000 l       .multiboot2_header	00000000 header_start
00000018 l       .multiboot2_header	00000000 header_end
00000000 l       .gdt	00000000 GDT64
00000000 l       .gdt	00000000 GDT64.null
00000008 l       .gdt	00000000 GDT64.code
00000010 l       .gdt	00000000 GDT64.data
00000018 l       .gdt	00000000 GDT64.Pointer
0000003d l       .text	00000000 fill_temporary_paging_tables
0000008e l       .text	00000000 fill_temporary_paging_tables.set_page_entry
000000be l       .text	00000000 setup_paging_tables
000000dd l       .text	00000000 setup_paging_tables.fill_p2_table
000000fa l       .text	00000000 enable_paging
00000125 l       .text	00000000 is_multiboot2_bootloader
0000012d l       .text	00000000 is_multiboot2_bootloader.no_multiboot
00000131 l       .text	00000000 is_cpuid_supported
00000145 l       .text	00000000 is_cpuid_supported.no_cpuid
00000149 l       .text	00000000 is_longmode_supported
00000167 l       .text	00000000 is_longmode_supported.no_longmode
0000016b l       .text	00000000 error_handler
00000000 l       .bss	00000000 p4_table
00001000 l       .bss	00000000 p3_table
00002000 l       .bss	00000000 p2_table
00003000 l       .bss	00000000 stack_bottom
00005000 l       .bss	00000000 stack_top
00000000         *UND*	00000000 asm_longmode_entry
00000000         *UND*	00000000 kernel_end
00000000 g       .text	00000000 start



Disassembly of section .text:

00000000 <start>:
   0:	fa                   	cli    
   1:	bc 00 50 00 00       	mov    $0x5000,%esp
			2: R_386_32	.bss
   6:	89 df                	mov    %ebx,%edi
   8:	e8 18 01 00 00       	call   125 <is_multiboot2_bootloader>
   d:	e8 1f 01 00 00       	call   131 <is_cpuid_supported>
  12:	e8 32 01 00 00       	call   149 <is_longmode_supported>
  17:	e8 a2 00 00 00       	call   be <setup_paging_tables>
  1c:	e8 d9 00 00 00       	call   fa <enable_paging>
  21:	0f 01 15 18 00 00 00 	lgdtl  0x18
			24: R_386_32	.gdt
  28:	66 b8 10 00          	mov    $0x10,%ax
  2c:	8e d8                	mov    %eax,%ds
  2e:	8e c0                	mov    %eax,%es
  30:	8e e0                	mov    %eax,%fs
  32:	8e e8                	mov    %eax,%gs
  34:	8e d0                	mov    %eax,%ss
  36:	ea 00 00 00 00 08 00 	ljmp   $0x8,$0x0
			37: R_386_32	asm_longmode_entry

0000003d <fill_temporary_paging_tables>:
  3d:	b8 00 00 00 00       	mov    $0x0,%eax
			3e: R_386_32	kernel_end
  42:	05 ff 0f 00 00       	add    $0xfff,%eax
  47:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  4c:	0f 22 d8             	mov    %eax,%cr3
  4f:	89 c7                	mov    %eax,%edi
  51:	31 c0                	xor    %eax,%eax
  53:	b9 00 10 00 00       	mov    $0x1000,%ecx
  58:	f3 ab                	rep stos %eax,%es:(%edi)
  5a:	0f 20 df             	mov    %cr3,%edi
  5d:	89 f8                	mov    %edi,%eax
  5f:	83 c8 03             	or     $0x3,%eax
  62:	89 07                	mov    %eax,(%edi)
  64:	81 c7 00 10 00 00    	add    $0x1000,%edi
  6a:	89 f8                	mov    %edi,%eax
  6c:	83 c8 03             	or     $0x3,%eax
  6f:	89 07                	mov    %eax,(%edi)
  71:	81 c7 00 10 00 00    	add    $0x1000,%edi
  77:	89 f8                	mov    %edi,%eax
  79:	83 c8 03             	or     $0x3,%eax
  7c:	89 07                	mov    %eax,(%edi)
  7e:	81 c7 00 10 00 00    	add    $0x1000,%edi
  84:	bb 03 00 00 00       	mov    $0x3,%ebx
  89:	b9 00 02 00 00       	mov    $0x200,%ecx

0000008e <fill_temporary_paging_tables.set_page_entry>:
  8e:	89 1f                	mov    %ebx,(%edi)
  90:	81 c3 00 10 00 00    	add    $0x1000,%ebx
  96:	83 c7 08             	add    $0x8,%edi
  99:	e2 f3                	loop   8e <fill_temporary_paging_tables.set_page_entry>
  9b:	0f 20 e0             	mov    %cr4,%eax
  9e:	83 c8 20             	or     $0x20,%eax
  a1:	0f 22 e0             	mov    %eax,%cr4
  a4:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
  a9:	0f 32                	rdmsr  
  ab:	0d 00 01 00 00       	or     $0x100,%eax
  b0:	0f 30                	wrmsr  
  b2:	0f 20 c0             	mov    %cr0,%eax
  b5:	0d 00 00 00 80       	or     $0x80000000,%eax
  ba:	0f 22 c0             	mov    %eax,%cr0
  bd:	c3                   	ret    

000000be <setup_paging_tables>:
  be:	b8 00 10 00 00       	mov    $0x1000,%eax
			bf: R_386_32	.bss
  c3:	83 c8 03             	or     $0x3,%eax
  c6:	a3 00 00 00 00       	mov    %eax,0x0
			c7: R_386_32	.bss
  cb:	b8 00 20 00 00       	mov    $0x2000,%eax
			cc: R_386_32	.bss
  d0:	83 c8 03             	or     $0x3,%eax
  d3:	a3 00 10 00 00       	mov    %eax,0x1000
			d4: R_386_32	.bss
  d8:	b9 00 00 00 00       	mov    $0x0,%ecx

000000dd <setup_paging_tables.fill_p2_table>:
  dd:	b8 00 00 20 00       	mov    $0x200000,%eax
  e2:	f7 e1                	mul    %ecx
  e4:	0d 83 00 00 00       	or     $0x83,%eax
  e9:	89 04 cd 00 20 00 00 	mov    %eax,0x2000(,%ecx,8)
			ec: R_386_32	.bss
  f0:	41                   	inc    %ecx
  f1:	81 f9 00 02 00 00    	cmp    $0x200,%ecx
  f7:	75 e4                	jne    dd <setup_paging_tables.fill_p2_table>
  f9:	c3                   	ret    

000000fa <enable_paging>:
  fa:	b8 00 00 00 00       	mov    $0x0,%eax
			fb: R_386_32	.bss
  ff:	0f 22 d8             	mov    %eax,%cr3
 102:	0f 20 e0             	mov    %cr4,%eax
 105:	83 c8 20             	or     $0x20,%eax
 108:	0f 22 e0             	mov    %eax,%cr4
 10b:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
 110:	0f 32                	rdmsr  
 112:	0d 00 01 00 00       	or     $0x100,%eax
 117:	0f 30                	wrmsr  
 119:	0f 20 c0             	mov    %cr0,%eax
 11c:	0d 00 00 00 80       	or     $0x80000000,%eax
 121:	0f 22 c0             	mov    %eax,%cr0
 124:	c3                   	ret    

00000125 <is_multiboot2_bootloader>:
 125:	3d 89 62 d7 36       	cmp    $0x36d76289,%eax
 12a:	75 01                	jne    12d <is_multiboot2_bootloader.no_multiboot>
 12c:	c3                   	ret    

0000012d <is_multiboot2_bootloader.no_multiboot>:
 12d:	b0 30                	mov    $0x30,%al
 12f:	eb 3a                	jmp    16b <error_handler>

00000131 <is_cpuid_supported>:
 131:	9c                   	pushf  
 132:	58                   	pop    %eax
 133:	89 c1                	mov    %eax,%ecx
 135:	35 00 00 20 00       	xor    $0x200000,%eax
 13a:	50                   	push   %eax
 13b:	9d                   	popf   
 13c:	9c                   	pushf  
 13d:	58                   	pop    %eax
 13e:	51                   	push   %ecx
 13f:	9d                   	popf   
 140:	31 c8                	xor    %ecx,%eax
 142:	74 01                	je     145 <is_cpuid_supported.no_cpuid>
 144:	c3                   	ret    

00000145 <is_cpuid_supported.no_cpuid>:
 145:	b0 37                	mov    $0x37,%al
 147:	eb 22                	jmp    16b <error_handler>

00000149 <is_longmode_supported>:
 149:	b8 00 00 00 80       	mov    $0x80000000,%eax
 14e:	0f a2                	cpuid  
 150:	3d 01 00 00 80       	cmp    $0x80000001,%eax
 155:	72 10                	jb     167 <is_longmode_supported.no_longmode>
 157:	b8 01 00 00 80       	mov    $0x80000001,%eax
 15c:	0f a2                	cpuid  
 15e:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
 164:	74 01                	je     167 <is_longmode_supported.no_longmode>
 166:	c3                   	ret    

00000167 <is_longmode_supported.no_longmode>:
 167:	b0 32                	mov    $0x32,%al
 169:	eb 00                	jmp    16b <error_handler>

0000016b <error_handler>:
 16b:	c7 05 00 80 0b 00 45 	movl   $0x4f524f45,0xb8000
 172:	4f 52 4f 
 175:	c7 05 04 80 0b 00 52 	movl   $0x4f3a4f52,0xb8004
 17c:	4f 3a 4f 
 17f:	c7 05 08 80 0b 00 20 	movl   $0x4f204f20,0xb8008
 186:	4f 20 4f 
 189:	a2 0a 80 0b 00       	mov    %al,0xb800a
 18e:	f4                   	hlt    
