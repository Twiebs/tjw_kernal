
#include <stddef.h>
#include <stdint.h>

static const size_t VGA_WIDTH = 80;
static const size_t VGA_HEIGHT = 25;

enum VGAColor {
	VGAColor_BLACK = 0,
	VGAColor_BLUE = 1,
	VGAColor_GREEN = 2,
	VGAColor_CYAN = 3,
	VGAColor_RED = 4,
	VGAColor_MAGENTA = 5,
	VGAColor_BROWN = 6
};

uint16_t vga_make_entry(char c, uint8_t color) {
	uint16_t char16 = c;
	uint16_t color16 = color;
	uint16_t result = char16 | color16 << 8;
	return result;
}

uint8_t vga_color(enum VGAColor foreground, enum VGAColor background) {
	uint8_t result = foreground | background << 4;
	return result;
}

typedef struct {
	size_t Row;
	size_t Column;
	uint8_t Color;
	uint16_t* Buffer;
} terminal;

typedef struct {
			
} kernel;

void terminal_initialize(terminal *Terminal) {
	Terminal->Row = 0;
	Terminal->Column = 0;
	Terminal->Color = vga_color(VGAColor_GREEN, VGAColor_BLACK);
	Terminal->Buffer = (uint16_t*)0xB8000;
	for (size_t y = 0; y < VGA_HEIGHT; y++) {
		for (size_t x = 0; x < VGA_WIDTH; x++) {
			const size_t index = (y * VGA_WIDTH) + x;
			Terminal->Buffer[index] = vga_make_entry(' ', Terminal->Color);
		}
	}
}

void terminal_write_char(terminal *Terminal, char c) {
	const size_t Index = (Terminal->Row * VGA_WIDTH) + Terminal->Column;
	Terminal->Buffer[Index] = vga_make_entry(c, Terminal->Color);
	Terminal->Column += 1;
	if (Terminal->Column >= VGA_WIDTH) {
		Terminal->Column = 0;
		if (Terminal->Row == VGA_HEIGHT) {
			Terminal->Row = 0;
		}
	}	
}

size_t string_length(const char* String) {
	size_t Result = 0;
	while (String[Result] != 0) Result++;
	return Result;
}

void terminal_write_string(terminal *Terminal, const char* Data) {
	size_t Length = string_length(Data);
	for (size_t i = 0; i < Length; i++) {
		terminal_write_char(Terminal, Data[i]);
	}
}

void terminal_newline(terminal *Terminal) {
	Terminal->Row += 1;
	Terminal->Column = 0;
}

void kernel_main() {
	terminal Terminal;	
	terminal_initialize(&Terminal);


	kernel_initalize();
	terminal_write_string(&Terminal, "[TJW-OS V0.0]");
	terminal_newline(&Terminal);
	terminal_write_string(&Terminal, "Hello Kernel!");
}

int kernel_initalize() {
	terminal_write_string(&Terminal, "[TJW-OS V0.0]");
	terminal_newline(&Terminal);
	terminal_write_string("Kernel Initalized")
	terminal_newline();
	return 0;	
}

int kernal_terminate() {
	return 0;
}
